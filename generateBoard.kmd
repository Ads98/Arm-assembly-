KMD
00000000: EA00001B    ;         B main
00000004:             ; 
00000004: 0012D687    ; seed    DEFW 1234567
00000008: 20 68 69 20 ; hi      DEFB " hi ",0
0000000C: 00          ; 
0000000D: 20 68 65 72 ; here    DEFB " here ",0
00000011: 65 20 00    ; 
00000014: 20 48 45 52 ; HERE2   DEFB " HERE2 ",0
00000018: 45 32 20 00 ; 
0000001C:             ;         ALIGN
0000001C: 00010003    ; multi   DEFW 65539
00000020: 20 20 20 31 ; row     DEFB "   1  2  3  4",0
00000024: 20 20 32 20 ; 
00000028: 20 33 20 20 ; 
0000002C: 34 00       ; 
0000002E: 20 20 00    ; space   DEFB "  ",0
00000031: 0A 00       ; gap     DEFB "\n",0
00000033:             ; 
00000033:             ; 
00000034:             ;         ALIGN
00000034:             ; 
00000034: FFFFFFFF    ;         board   DEFW    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 
00000038: FFFFFFFF    ; 
0000003C: FFFFFFFF    ; 
00000040: FFFFFFFF    ; 
00000044: FFFFFFFF    ; 
00000048: FFFFFFFF    ; 
0000004C: FFFFFFFF    ; 
00000050: FFFFFFFF    ; 
00000054: FFFFFFFF    ; 
00000058: FFFFFFFF    ; 
0000005C: FFFFFFFF    ; 
00000060: FFFFFFFF    ; 
00000064: FFFFFFFF    ; 
00000068: FFFFFFFF    ; 
0000006C: FFFFFFFF    ; 
00000070: FFFFFFFF    ; 
00000074:             ; 
00000074: E24F004B    ; main    ADRL R0,gap
00000078: EF000003    ;         SWI 3
0000007C: E24F0050    ;         ADR R0, board
00000080: E3A05000    ;         MOV R5,#0
00000084: E3A06000    ;         MOV R6,#0
00000088: EB000046    ; gen     BL randu
0000008C: EB00002F    ;         BL make
00000090: E3550008    ;         CMP R5,#8
00000094: 1AFFFFFB    ;         BNE gen
00000098: EB00000F    ;         BL printBoard
0000009C: EF000002    ;         SWI 2
000000A0:             ; 
000000A0:             ; ; printBoard -- print the board 
000000A0:             ; ; Input: R0 <-- Address of board
000000A0:             ;         ; Copy your implementation of printBoard here from the firsrt exercise
000000A0:             ; 
000000A0: E24F007A    ; PRINTR          ADR R0,space
000000A4: EF000003    ;                 SWI  3
000000A8: E3A01001    ;                 MOV R1,#1
000000AC:             ;                 
000000AC:             ; 
000000AC: E24F0080    ; Astrix          ADR R0, board   
000000B0: E0040392    ;                 MUL R4,R2,R3
000000B4: E7D00004    ;                 LDRB R0,[R0,R4]
000000B8: E2800041    ;                 ADD R0,R0,#'A'
000000BC: EF000000    ;                 SWI 0
000000C0: E2822001    ;                 ADD R2,R2,#1
000000C4: E24F009E    ;                 ADR R0,space
000000C8: EF000003    ;                 SWI 3
000000CC: E2811001    ;                 ADD R1,R1,#1
000000D0: E3510004    ;                 CMP R1,#4
000000D4: DAFFFFF4    ;                 BLE Astrix
000000D8: E1A0F00E    ;                 MOV PC,R14
000000DC:             ; 
000000DC:             ; 
000000DC:             ; 
000000DC: E24F00B0    ; printBoard      ADRL R0, board
000000E0: E1A0D00E    ;                 MOV R13,R14 
000000E4: E3A03004    ;                 MOV R3,#4           
000000E8: E3A02000    ;                 MOV R2,#0
000000EC: E24F00D4    ;                 ADR R0,row
000000F0: EF000003    ;                 SWI 3
000000F4: E24F00CB    ;                 ADR R0,gap
000000F8: EF000003    ;                 SWI 3
000000FC: E3A00041    ;                 MOV R0,#'A'
00000100: EF000000    ;                 SWI 0
00000104: EBFFFFE5    ;                 BL PRINTR
00000108: E24F00DF    ;                 ADR R0,gap
0000010C: EF000003    ;                 SWI 3
00000110: E3A00042    ;                 MOV R0,#'B'
00000114: EF000000    ;                 SWI 0
00000118: EBFFFFE0    ;                 BL PRINTR
0000011C: E24F00F3    ;                 ADR R0,gap
00000120: EF000003    ;                 SWI 3
00000124: E3A00043    ;                 MOV R0,#'C'
00000128: EF000000    ;                 SWI 0
0000012C: EBFFFFDB    ;                 BL PRINTR
00000130: E24F0007    ;                 ADRL R0,gap
00000134: E2400C01    ; 
00000138: EF000003    ;                 SWI 3
0000013C: E3A00044    ;                 MOV R0,#'D'
00000140: EF000000    ;                 SWI 0
00000144: EBFFFFD5    ;                 BL PRINTR
00000148: EB00000D    ;                 BL RESET
0000014C: E1A0F00D    ;                 MOV PC,R13
00000150:             ;                 
00000150:             ; 
00000150: E24F0F49    ; make            ADRL R0,board
00000154: E7900004    ;                 LDR R0,[R0,R4]
00000158: E3700001    ;                 CMP R0,#-1
0000015C: 1A000007    ;                 BNE fin
00000160: E24F0F4D    ;                 ADRL R0,board
00000164: E7805004    ;                 STR R5,[R0,R4]
00000168: E2866001    ;                 ADD R6,R6,#1
0000016C: E3560002    ;                 CMP R6,#2
00000170: 0A000000    ;                 BEQ newChar
00000174: EA000001    ;                 B fin
00000178:             ; 
00000178: E3A06000    ; newChar         MOV R6,#0               
0000017C: E2855001    ;                 ADD R5,R5,#1
00000180:             ; 
00000180: E1A0F00E    ; fin             MOV PC,R14
00000184:             ; 
00000184:             ; 
00000184: E24F0F56    ; RESET           ADRL R0,board
00000188: E3A06000    ;                 MOV R6,#0
0000018C: E3E05000    ;                 MOV R5,#-1
00000190: E24F0F59    ; initialise      ADRL R0,board   
00000194: E7805106    ;                 STR R5,[R0,R6 lsl #2]
00000198: E2866001    ;                 ADD R6,R6,#1
0000019C: E3560010    ;                 CMP R6,#16
000001A0: 1AFFFFFA    ;                 BNE initialise
000001A4: E1A0F00E    ;                 MOV PC,R14
000001A8:             ;                 
000001A8:             ; 
000001A8:             ; ; randu -- Generates a random number
000001A8:             ; ; Input: None
000001A8:             ; ; Ouptut: R0 -> Random number
000001A8:             ; 
000001A8: E51F01AC    ; randu   LDR R0,seed     
000001AC: E51F21B0    ;         LDR R2,seed
000001B0: E51F319C    ;         LDR R3,multi
000001B4: E0020392    ;         MUL R2,R2,R3
000001B8: E3E01102    ;         MOV R1, #0x7FFFFFFF
000001BC: E0020001    ;         AND R0,R2,R1
000001C0: E50F01C4    ;         STR R0,seed
000001C4: E1A00440    ;         MOV R0, R0 ASR #8;  
000001C8: E200000F    ;         AND R0, R0, #0xf ;
000001CC: E3A04004    ;         MOV R4,#4
000001D0: E0040490    ;         MUL R4,R0,R4
000001D4: E1A0F00E    ;         MOV PC,R14
000001D8:             ; 
000001D8:             ; 
000001D8:             ; 
000001D8:             ;         ; Copy your implementation of randu from the previous coursework here
000001D8:             ; 
000001D8:             ; 

Symbol Table: Labels
: seed                              00000004  Local -- ARM
: hi                                00000008  Local -- ARM
: here                              0000000D  Local -- ARM
: HERE2                             00000014  Local -- ARM
: multi                             0000001C  Local -- ARM
: row                               00000020  Local -- ARM
: space                             0000002E  Local -- ARM
: gap                               00000031  Local -- ARM
: board                             00000034  Local -- ARM
: main                              00000074  Local -- ARM
: gen                               00000088  Local -- ARM
: PRINTR                            000000A0  Local -- ARM
: Astrix                            000000AC  Local -- ARM
: printBoard                        000000DC  Local -- ARM
: make                              00000150  Local -- ARM
: newChar                           00000178  Local -- ARM
: fin                               00000180  Local -- ARM
: RESET                             00000184  Local -- ARM
: initialise                        00000190  Local -- ARM
: randu                             000001A8  Local -- ARM
